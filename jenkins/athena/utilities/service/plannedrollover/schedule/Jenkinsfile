
// Notify to channel
def notifyGChat(env, branch, version, commit, channel) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  hangoutsNotify message: "_${currentBuild.result}_\nDuration: ${DURATION}",
    token: "${channel}", threadByJob: true
}

def notifySlack(env, branch, version, commit, channel) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  def blocks = [
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": ":rocket: *Subject here!*"
      ]
    ],
      [
      "type": "divider"
    ],
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": "Status: *${currentBuild.result}*\nDuration: ${DURATION}"
      ]
    ]
  ]
  slackSend(channel: "#${channel}", blocks: blocks)
}

node {
    sitesList = sh (script: 'cat ${JENKINS_HOME}/athena/sites/nonprod.dev.sites.txt', returnStdout: true).trim()
}

pipeline {
  agent any

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'env_type', choices: ['nonprod', 'prod'], description: 'Type of Environment to take snapshot. Currently supports for nonprod only.')
    choice(name: 'environment', choices: "${sitesList}", description: 'Environment to take DB snapshot from. Default is demo')
    string(name: 'schedule', defaultValue: "0 0 2 * * *", description: 'Schedule for PlannedRollover to run on UTC timezone. Default is 2:00 AM.')
  }

  environment {
    RUN_FILE = 'update_schedule.sh'
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }

      stages {
        stage('Get AWS_CMD for env_type') {
          steps {
            script {
              env.AWS_CMD = 'aws'
              if(env_type == 'prod') {
                env.AWS_CMD = 'aws --profile prod'
              } else {
                env.AWS_CMD = 'aws'
              }

              // Get BE_ASG_NAME from AWS Parameter Store
              env.BE_ASG_NAME = sh(script: "${AWS_CMD} ssm get-parameter --name /edulog/athena/${env_type}/${environment}/be_asg --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
            }
          }
        }
        // stage('Schedule') {
        //   when { equals expected: 'prod', actual: params.env_type }
        //   environment {
        //     ip_addresses = sh(script: '/usr/local/bin/getip_fromasg get_private_ip --profile ${env_type} --name=${BE_ASG_NAME}', returnStdout: true).trim()
        //     ssh_profile = "${JENKINS_HOME}/.ssh/devops.pem"
        //     ssh_user = 'ubuntu'
        //   }
        //   steps {
        //     script {
        //       ip_addresses.tokenize(',[]').each { ip ->
        //         if(service == 'all-core-services') {
        //           sh "ssh -i ${ssh_profile} ${ssh_user}@${ip} -t 'sudo systemctl ${action} gateway;sudo systemctl ${action} middle;sudo systemctl ${action} backend;sudo systemctl ${action} geocodeservice;sudo systemctl ${action} importservice;sudo systemctl ${action} plannedrollover'"
        //         } else {
        //           sh "ssh -i ${ssh_profile} ${ssh_user}@${ip} -t 'sudo systemctl ${action} ${service}'"
        //         }
        //       }
        //     }
        //   }
        // }
        stage('Update Schedule for ${environment}') {
          when { not { equals expected: 'prod', actual: params.env_type } }
          environment {
            ip_addresses = sh(script: '/usr/local/bin/getip_fromasg get_private_ip --name=${BE_ASG_NAME}', returnStdout: true).trim()
            ssh_profile = "${JENKINS_HOME}/.ssh/devops.pem"
            ssh_user = 'ubuntu'
          }
          steps {
            script {
              echo "ip ${ip_addresses}"
              ip_addresses.tokenize(',[]').each { ip ->
                ip = ip.trim()
                sh "scp -i ${ssh_profile} athena/utilities/service/plannedrollover/schedule/${RUN_FILE} ${ssh_user}@${ip}:/tmp"
                sh "ssh -i ${ssh_profile} ${ssh_user}@${ip} -t 'sh /tmp/$RUN_FILE -s \"$schedule\"'"
                sh "ssh -i ${ssh_profile} ${ssh_user}@${ip} -t 'sudo systemctl restart plannedrollover'"
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      echo "=> Clean Workspace after run"
      // cleanWs()
    }
    success {
      echo "==> Build Success"
    }
    failure {
      echo "==> Build Failure"
    }
  }
}