// Job Name: ath-be-deploy-prod
pipeline {
  agent any

  parameters {
    booleanParam(name: 'Refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'TENANT', choices: ['chiefleschi-wa', 'chiefleschi-wa-2', 'puydedome', 'frenchtown-sales', 'release'], description: 'Tenant to deploy')
    string(name: 'RELEASE_VERSION', description: 'QA/QC Image Tag for the Release Version of Backend. Ex: BE-1.0.0')
  }

  environment {
    ENV = 'prod'
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages{
        stage('Deploy to Tenant ${params.TENANT}') {
          steps {
            echo "==> Update new AMI into ${env.ENV} CFN Stack of Tenant: ${params.TENANT}"
            sh '''#!/bin/bash
              /usr/local/bin/deploy-prod ${TENANT} ${RELEASE_VERSION}
            '''
          }
        }
      }
    }
  }

  post {
    success {
      echo "Deploy success for Environment: ${ENV} on Tenant: ${params.TENANT}"
      hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${ENV}\nTenant: ${TENANT}\nRelease-Version: ${RELEASE_VERSION}\nDuration: ${currentBuild.durationString}",
        token: "${ATH_GOOGLE_CHAT_TOKEN}", threadByJob: true
    }
    failure {
      echo "Deploy failure for Environment: ${ENV} on Tenant: ${params.TENANT}"
      hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${ENV}\nTenant: ${TENANT}\nRelease-Version: ${RELEASE_VERSION}\nDuration: ${currentBuild.durationString}",
        token: "${ATH_GOOGLE_CHAT_TOKEN}", threadByJob: true
    }
  }
}
