// Notify to channel
def notifyGChat(env, branch, version, commit, channel) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${env}\nBranch: ${branch}\n*BuildVersion*: ${version}\nCommit: ${commit}\nDuration: ${DURATION}",
    token: "${channel}", threadByJob: true
}

def notifySlack(env, branch, version, commit, channel) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  def blocks = [
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": ":rocket: *AthenaUI - #${branch}*"
      ]
    ],
      [
      "type": "divider"
    ],
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": "Status: *${currentBuild.result}*\nEnvironment: ${env}\nBranch: ${branch}\n*BuildVersion*: ${version}\nCommit: ${commit}\nDuration: ${DURATION}"
      ]
    ]
  ]
  slackSend(channel: "#${channel}", blocks: blocks)
}

pipeline {
  agent any

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(
      name: 'service', 
      choices: [
        'gateway', 'athena', 'geocodeservice', 'aggregateservice', 'overlay', 'rres', 'importservice', 'ivin', 
        'timeattendance', 'acd'
      ], 
      description: 'The Service Build that trigger this job.')
    string(name: 'binary_path', description: "The binary path file name. Ex: s3://edulog-athena-artifacts/athena/build/")
    string(name: 'version', defaultValue: '', description: 'Version of Service.')
    choice(name: 'env_type', choices: ['nonprod'], description: 'Type of Environment to deploy to. Currently supports for nonprod only.')
    string(name: 'environment', description: 'Environment Name to deploy directly.')
  }

  environment {
    GW_NAME = 'gateway'
    GC_NAME = 'GeoCodeService'
    AS_NAME = 'AggregateService'
    OL_NAME = 'Overlay'
    RRES_NAME = 'RideRegistrationETL'
    IS_NAME = 'ImportService'
    IVIN_NAME = 'IVIN'
    EDTA_NAME = 'DriverTimeAndAttendance'
    ACD_NAME = 'AthenaCommandDistributorService'
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages {
        stage('Get Backend ASG Information') {
          steps {
            script {
              env.AWS_CMD = 'aws'
              env.AWS_REGION = 'us-east-2'
              if(env_type == 'prod') {
                env.AWS_CMD = 'aws --profile prod'
              } else if(environment == 'puydedome') {
                env.AWS_REGION = 'eu-west-3'
              } else {
                env.AWS_CMD = 'aws'
              }

              // Get BE_ASG_NAME from AWS Parameter Store
              env.BE_ASG_NAME = sh(script: "${AWS_CMD} --region ${AWS_REGION} ssm get-parameter --name /edulog/athena/${env_type}/${environment}/be_asg --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
            }
          }
        }
        stage('Get Service Name') {
          steps {
            script {
              switch(service) {
                case 'gateway':
                  env.service_name = GW_NAME
                  break
                case 'geocodeservice':
                  env.service_name = GC_NAME
                  break
                case 'aggregateservice':
                  env.service_name = AS_NAME
                  break
                case 'importservice':
                  env.service_name = IS_NAME
                  break
                case 'rres':
                  env.service_name = RRES_NAME
                  break
                case 'overlay':
                  env.service_name = OL_NAME
                  break
                case 'ivin':
                  env.service_name = IVIN_NAME
                  break
                case 'timeattendance':
                  env.service_name = EDTA_NAME
                  break
                case 'acd':
                  env.service_name = GIT_REPO_ACD
                  break
                default:
                  env.service_name = 'Athena'
                  break
              }
            }
          }
        }
        stage('Deploy to $environment Environment') {
          environment {
            ip_addresses = sh(script: '/usr/local/bin/getip_fromasg get_private_ip --region=${AWS_REGION} --name=${BE_ASG_NAME}', returnStdout: true).trim()
            ssh_profile = "${JENKINS_HOME}/.ssh/devops.pem"
            ssh_user = 'ubuntu'
          }
          steps {
            echo "=> Deploy to $environment Backend Instance"
            dir('athena/on-demand/backend/deploy') {
              script {
                env.script_file = 'deploy-single-service.sh'
                if(service == 'athena') {
                  env.script_file = 'deploy-group-services.sh'
                } else {
                  env.script_file = 'deploy-single-service.sh'
                }
                ip_addresses.tokenize(',[]').each { ip ->
                  ip = ip.trim()
                  echo "PrivateIP: ${ip}"
                  echo "${script_file}"
                  sh "scp -i ${ssh_profile} ./${script_file} ${ssh_user}@${ip}:/tmp"
                  sh "ssh -i ${ssh_profile} ${ssh_user}@${ip} -t 'cd /tmp && sh ${script_file} ${service} ${service_name} ${version} ${binary_path}'"
                  echo "executed: ${script_file}"
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo "=> Cleanup Workspace after finished!"
      cleanWs()
    }
  }
}
