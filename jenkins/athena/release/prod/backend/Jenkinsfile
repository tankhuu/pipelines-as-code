// Notify to channel
def notifyGChat(env_name, version, channel, creator) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  hangoutsNotify message: "Status: *${currentBuild.result}*\nType: Backend\nEnvType: Prod\nEnvironmentName: ${env_name}\n*ReleaseVersion*: ${version}\nDuration: ${DURATION}\nCreator: ${creator}",
    token: "${channel}", threadByJob: true
}

def notifySlack(env_name, version, channel, creator) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  def blocks = [
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": ":rocket: *Athena UI*"
      ]
    ],
      [
      "type": "divider"
    ],
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": "Status: *${currentBuild.result}*\nType: Backend\nEnvType: Prod\nEnvironmentName: ${env_name}\n*ReleaseVersion*: ${version}\nDuration: ${DURATION}\nCreator: ${creator}"
      ]
    ]
  ]
  slackSend(channel: "#${channel}", blocks: blocks)
}

node {
    beReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_backend.txt', returnStdout: true).trim()
    sitesList = sh (script: 'cat ${JENKINS_HOME}/athena/sites/prod.sites.txt', returnStdout: true).trim()
}

pipeline {
  agent any

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'TENANT', choices: "${sitesList}", description: 'Tenant to deploy') 
    choice(name: 'RELEASE_VERSION', choices: "${beReleasesList}", description: 'Release Version of Backend to get AMI for Deployment Backend Services. Ex: 1.29.0')
  }

  environment {
    ENV = 'prod'

    GCHAT_TOKEN = "${GCHAT_TOKEN_ATH_RELEASE}"
    SLACK_CHANNEL = "${SLACK_ATH_RELEASE}"
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages {
        stage('Verify Authorization') {
          steps {
            script {
              // Get Build User
              wrap([$class: 'BuildUser']) {
                env.CREATOR = "${BUILD_USER_ID}"
              }
              if(CREATOR == 'anonymous') {
                error('You have to login to run this job!!!')
              }
            }
          }
        }
        stage('Deploy to Tenant ${params.TENANT}') {
          steps {
            echo "==> Update new AMI into ${env.ENV} CFN Stack of Tenant: ${params.TENANT}"
            sh '''#!/bin/bash
              /usr/local/bin/deploy-prod ${TENANT} ${RELEASE_VERSION}
            '''
          }
          post {
            success {
              echo "Deploy success for ${TENANT}"
              notifyGChat("${TENANT}", "${RELEASE_VERSION}", "${GCHAT_TOKEN}", "${CREATOR}")
              notifySlack("${TENANT}", "${RELEASE_VERSION}", "${SLACK_CHANNEL}", "${CREATOR}")
            }
            failure {
              echo "Deploy failure for ${TENANT}"
              notifyGChat("${TENANT}", "${RELEASE_VERSION}", "${GCHAT_TOKEN}", "${CREATOR}")
              notifySlack("${TENANT}", "${RELEASE_VERSION}", "${SLACK_CHANNEL}", "${CREATOR}")
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo '==> Clean up built after run'
      cleanWs()
    }
    success {
      echo "Job run success"
    }
    failure {
      echo "Job run failure"
    }
  }
}