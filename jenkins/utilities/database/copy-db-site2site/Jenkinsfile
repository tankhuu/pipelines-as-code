pipeline{
  agent any

  parameters {
    string(name: 'srcSite', description: 'Source Site')
    // string(name: 'srcEnv', choices: ['prod', 'nonprod'], description: 'Source Environment')
    string(name: 'dstSite', description: 'Destination Site')
    // string(name: 'dstEnv', choices: ['prod', 'nonprod'], description: 'Destination Environment')
  }

  environment {
    BACKUP_PRJ_PROD = 'devops/utilities/database/prod/take-snapshot'
    BACKUP_PRJ_NONPROD = 'devops/utilities/database/nonprod/take-snapshot'
  }

  stages {
    stage('Run Jenkins Job') {
      stages {
        stage('Verify Authorization') {
          steps {
            script {
              // Get Build User
              wrap([$class: 'BuildUser']) {
                env.CREATOR = "${BUILD_USER_ID}"
              }
              if(CREATOR == 'anonymous') {
                error('You have to login to run this job!!!')
              }
            }
          }
        }
        // Get AWS_CMD for srcEnv
        stage('Get AWS_CMD for srcEnv') {
          steps {
            script {
              env.SRC_AWS_CMD = 'aws'
              if("${srcEnv}" == 'prod') {
                env.SRC_AWS_CMD = 'aws --profile prod'
              } else {
                env.SRC_AWS_CMD = 'aws'
              }
              echo "${dstEnv}"
              echo "${SRC_AWS_CMD}"
            }
          }
        }
        // Get AWS_CMD for dstEnv
        stage('Get AWS_CMD for dstEnv') {
          steps {
            script {
              env.DST_AWS_CMD = 'aws'
              if("${dstEnv}" == 'prod') {
                env.DST_AWS_CMD = 'aws --profile prod'
                env.BACKUP_PRJ = "${BACKUP_PRJ_PROD}"
              } else {
                env.DST_AWS_CMD = 'aws'
                env.BACKUP_PRJ = "${BACKUP_PRJ_NONPROD}"
              }
              echo "${dstEnv}"
              echo "${DST_AWS_CMD}"
              echo "${BACKUP_PRJ}"
              env.runDate = sh(script: "echo `date +%Y%m%d-%H%M%S`", returnStdout: true).trim()
            }
          }
        }
        // Backup dstSite DB
        stage ('Backup DB of the Dst Site') {
          steps {
            build job: "${BACKUP_PRJ}", parameters: [
              string(name: 'description', value: "Backup DB of the Destination Site"),
              string(name: 'siteName', value: "${dstSite}")
            ]
          }
        }
        // Copy DB from srcSite to dstSite
        stage('copy database from srcSite to dstSite') {
          environment {
            SRC_RDS_EP = sh(script: "${SRC_AWS_CMD} ssm get-parameter --name /edulog/athena/${srcEnv}/${srcSite}/rds_endpoint --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
            SRC_DB_PASS = sh(script: "${SRC_AWS_CMD} ssm get-parameter --with-decryption --name /edulog/athena/${srcEnv}/${srcSite}/db_pass --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
            DST_RDS_EP = sh(script: "${DST_AWS_CMD} ssm get-parameter --name /edulog/athena/${dstEnv}/${dstSite}/rds_endpoint --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
            DST_DB_PASS = sh(script: "${DST_AWS_CMD} ssm get-parameter --with-decryption --name /edulog/athena/${dstEnv}/${dstSite}/db_pass --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
          }
          steps {
            dir('scripts/bash') {
              echo "=> Run script take snapshot"
              echo "${DST_RDS_EP}"
              echo "${DST_DB_PASS}"
              sh "/bin/sh copy_db_site2site.sh ${SRC_RDS_EP} ${SRC_DB_PASS} ${DST_RDS_EP} ${DST_DB_PASS} ${runDate}"
            }
          }
        }
      }
    }
  }
  post {
    always {
      echo "=> Clean Workspace after run"
      cleanWs()
    }
    success {
      echo "==> Build Success"
    }
    failure {
      echo "==> Build Failure"
    }
  }
}
