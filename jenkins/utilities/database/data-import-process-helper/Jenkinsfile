
// Notify to channel
def notifyGChat() {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  hangoutsNotify message: "_${currentBuild.result}_\nDuration: ${DURATION}",
    token: "${channel}", threadByJob: true
}

def notifySlack() {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  def blocks = [
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": ":rocket: *Subject here!*"
      ]
    ],
      [
      "type": "divider"
    ],
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": "Status: *${currentBuild.result}*\nDuration: ${DURATION}"
      ]
    ]
  ]
  slackSend(channel: "#${channel}", blocks: blocks)
}

node {
  environmentList = sh(script: "aws ssm get-parameter --name /edulog/athena/nonprod/development/environments --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
}

pipeline{
  agent any

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'env_type', choices: ['nonprod', 'prod'], description: 'Type of Environment.')
    choice(name: 'region', choices: ['us-east-2', 'eu-west-3'], description: 'Region that hosted Environment in AWS.')
    choice(name: 'environment', 
      choices: "$environmentList",
      description: 'Environment to resize RDS Instance. Default is develop')
    choice(name: 'action', choices: ['bootstrap', 'finish'], description: 'Action for helping data import process.')
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages {
        stage('Get AWS_CMD for env_type') {
          steps {
            script {
              env.AWS_CMD = 'aws'
              if(env_type == 'prod') {
                env.AWS_CMD = 'aws --profile prod'
              } else {
                env.AWS_CMD = 'aws'
              }
            }
          }
        }
        stage('Resize RDS Instance') {
          environment {
            DB_INSTANCE_IDENTIFIER = "athena-${environment}-rds"
          }
          steps {
            echo "=> Resize RDS Instance to ${params.rds_instance_size}"
            // sh "${AWS_CMD} --region ${region} rds modify-db-instance --db-instance-identifier ${DB_INSTANCE_IDENTIFIER} --db-instance-class ${rds_instance_size}"
            // echo "=> Wait for RDS Instance to be available"
            // sh "${AWS_CMD} --region ${region} rds wait db-instance-available --db-instance-identifier ${DB_INSTANCE_IDENTIFIER}"
          }
        }
      }
    }
  }
  post {
    always {
      echo "=> Clean Workspace after run"
      // cleanWs()
    }
    success {
      echo "==> Build Success"
    }
    failure {
      echo "==> Build Failure"
    }
  }
}
