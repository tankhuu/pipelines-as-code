pipeline {
  agent any

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'env_type', choices: ['nonprod', 'prod'], description: 'Type of Environment to take action on ASG.')
    choice(name: 'environment', 
      choices: ['', 'vb', 'vb-e1', 'vb-e3'], 
      description: 'Environment to resize on ASG.')
    choice(name: 'size', choices: ['1', '2', '3'])
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages {
        stage('Get AWS_CMD') {
          steps {
            script {
              env.AWS_CMD = 'aws'
              if(env_type == 'prod') {
                env.AWS_CMD = "aws --profile prod"
              } else {
                env.AWS_CMD = "aws"
              }

              env.ASG_NAME = sh(script: "${AWS_CMD} ssm get-parameter --name /edulog/athena/${env_type}/${environment}/be_asg --output text --query 'Parameter.[Value]'", returnStdout: true).trim()
            }
          }
        }
        stage('Control AutoScaling Group') {
          steps {
            echo "=> Gonna resize ASG: ${ASG_NAME} to ${size}"
            sh "${AWS_CMD} autoscaling update-auto-scaling-group --auto-scaling-group-name ${ASG_NAME} --min-size ${size} --desired-capacity ${size}"
          }
        }
      }
    }
  }
  post {
    always {
      echo "=> Clean Workspace after run"
      // cleanWs()
    }
    success {
      echo "==> Build Success"
    }
    failure {
      echo "==> Build Failure"
    }
  }
}